package repository

import (
	"github.com/ekokurniadi/tokopedia-go-submittion/entity"
	"gorm.io/gorm"
)

type TodoRepository interface {
	SaveTodo(todo entity.Todo) (entity.Todo, error)
	UpdateTodo(todo entity.Todo) (entity.Todo, error)
	FindByIDTodo(ID int) (entity.Todo, error)
	FindAllTodo() ([]entity.Todo, error)
	FindAllTodoInComplete() ([]entity.Todo, error)
	DeleteByIDTodo(ID int) (entity.Todo, error)
}

type todoRepository struct {
	db *gorm.DB
}

func NewTodoRepository(db *gorm.DB) *todoRepository {
	return &todoRepository{db}
}

func (r *todoRepository) SaveTodo(todo entity.Todo) (entity.Todo, error) {
	err := r.db.Create(&todo).Error
	if err != nil {
		return todo, err
	}
	return todo, nil

}
func (r *todoRepository) FindByIDTodo(ID int) (entity.Todo, error) {
	var todo entity.Todo
	err := r.db.Where("id = ? ", ID).Find(&todo).Error
	if err != nil {
		return todo, err
	}
	return todo, nil

}
func (r *todoRepository) UpdateTodo(todo entity.Todo) (entity.Todo, error) {
	err := r.db.Save(&todo).Error
	if err != nil {
		return todo, err
	}
	return todo, nil

}
func (r *todoRepository) FindAllTodo() ([]entity.Todo, error) {
	var todos []entity.Todo
	err := r.db.Where("status = ?", true).Find(&todos).Error
	if err != nil {
		return todos, err
	}
	return todos, nil

}
func (r *todoRepository) FindAllTodoInComplete() ([]entity.Todo, error) {
	var todos []entity.Todo
	err := r.db.Where("status = ?", false).Find(&todos).Error
	if err != nil {
		return todos, err
	}
	return todos, nil

}
func (r *todoRepository) DeleteByIDTodo(ID int) (entity.Todo, error) {
	var todo entity.Todo
	err := r.db.Where("id = ? ", ID).Delete(&todo).Error
	if err != nil {
		return todo, err
	}
	return todo, nil

}

//Generated by Micagen at 11 Desember 2021
