package service

import (
	"github.com/ekokurniadi/tokopedia-go-submittion/entity"
	"github.com/ekokurniadi/tokopedia-go-submittion/input"
	"github.com/ekokurniadi/tokopedia-go-submittion/repository"
)

type TodoService interface {
	TodoServiceGetAll() ([]entity.Todo, error)
	TodoServiceGetAllInComplete() ([]entity.Todo, error)
	TodoServiceGetByID(inputID input.InputIDTodo) (entity.Todo, error)
	TodoServiceCreate(input input.TodoInput) (entity.Todo, error)
	TodoServiceUpdate(inputID input.InputIDTodo, inputData input.TodoInput) (entity.Todo, error)
	TodoServiceDeleteByID(inputID input.InputIDTodo) (bool, error)
}
type todoService struct {
	repository repository.TodoRepository
}

func NewTodoService(repository repository.TodoRepository) *todoService {
	return &todoService{repository}
}
func (s *todoService) TodoServiceCreate(input input.TodoInput) (entity.Todo, error) {
	todo := entity.Todo{}
	todo.Title = input.Title
	todo.Status = false
	newTodo, err := s.repository.SaveTodo(todo)
	if err != nil {
		return newTodo, err
	}
	return newTodo, nil
}
func (s *todoService) TodoServiceUpdate(inputID input.InputIDTodo, inputData input.TodoInput) (entity.Todo, error) {
	todo, err := s.repository.FindByIDTodo(inputID.ID)
	if err != nil {
		return todo, err
	}
	todo.Status = inputData.Status

	updatedTodo, err := s.repository.UpdateTodo(todo)

	if err != nil {
		return updatedTodo, err
	}
	return updatedTodo, nil
}
func (s *todoService) TodoServiceGetByID(inputID input.InputIDTodo) (entity.Todo, error) {
	todo, err := s.repository.FindByIDTodo(inputID.ID)
	if err != nil {
		return todo, err
	}
	return todo, nil
}
func (s *todoService) TodoServiceGetAll() ([]entity.Todo, error) {
	todos, err := s.repository.FindAllTodo()
	if err != nil {
		return todos, err
	}
	return todos, nil
}
func (s *todoService) TodoServiceGetAllInComplete() ([]entity.Todo, error) {
	todos, err := s.repository.FindAllTodoInComplete()
	if err != nil {
		return todos, err
	}
	return todos, nil
}
func (s *todoService) TodoServiceDeleteByID(inputID input.InputIDTodo) (bool, error) {
	_, err := s.repository.FindByIDTodo(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDTodo(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

//Generated by Micagen at 11 Desember 2021
